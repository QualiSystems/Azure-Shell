import azure
from azure.mgmt.compute.models import OSProfile, HardwareProfile, VirtualMachineSizeTypes, NetworkProfile, \
    NetworkInterfaceReference, OSDisk, CachingTypes, DiskCreateOptionTypes, VirtualHardDisk, ImageReference
from azure.mgmt.network.models import NetworkInterfaceIPConfiguration, IPAllocationMethod, NetworkInterface
from azure.mgmt.storage.models import StorageAccountCreateParameters, SkuName

from cloudshell.cp.azure.domain.services.virtual_machine_service import VirtualMachineService
from cloudshell.cp.azure.models.deploy_result_model import DeployResult


class DeployAzureVMOperation(object):
    def __init__(self,
                 logger,
                 vm_service):
        """

        :param logger:
        :param VirtualMachineService vm_service:
        :return:
        """

        self.logger = logger
<<<<<<< HEAD
        self.compute_management_client = compute_management_client
        self.resource_management_client = resource_management_client
        self.storage_client = storage_client
        self.network_client = network_client

    def deploy(self,azure_vm_deployment_model,cloud_provider_deployment_model):
        # deploy_data = self.compute_client.virtual_machines.create_or_update(
        #     azure_vm_deployment_model.group_name,
        #     azure_vm_deployment_model.vm_name,
        #     VirtualMachine(
        #         location='TBD',
        #         os_profile=OSProfile(
        #             computer_name='TBD',
        #             admin_username='TBD',
        #             admin_password='TBD'
        #         ),
        #         hardware_profile=HardwareProfile(
        #             vm_size=VirtualMachineSizeTypes.basic_a0
        #         ),
        #         network_profile=NetworkProfile(
        #             network_interfaces=[
        #                 NetworkInterfaceReference(
        #                     id='TBD'
        #                 ),
        #             ]
        #         ),
        #         storage_profile=StorageProfile(
        #             os_disk=OSDisk(
        #                 caching=CachingTypes.none,
        #                 create_option=DiskCreateOptionTypes.from_image,
        #                 name='TBD',
        #                 vhd=VirtualHardDisk(
        #                     uri='TBD',  # the VM name
        #                 )
        #             ),
        #             image_reference=ImageReference(
        #                 publisher=azure_vm_deployment_model.image_publisher,
        #                 offer=azure_vm_deployment_model.image_offer,
        #                 sku=azure_vm_deployment_model.image_sku,
        #                 version='TBD'
        #             )
        #         )
        #     )
        # )
=======
        self.vm_service = vm_service

    def deploy(self, azure_vm_deployment_model, cloud_provider_model):
        compute_client = self.vm_service.compute_management_client

        ##inputs from attributes?
        resource_name = ""
        group_name = ""
        region = ""
        image_publisher = 'Canonical'
        image_offer = 'UbuntuServer'
        image_sku = '16.04.0-LTS'
        image_version = 'latest'

        admin_username = 'gil1'
        interface_name = 'gil6'
        network_name = 'gil7'
        subnet_name = 'gil8'
        ip_name = 'gil9'

        storage_account_name = 'gil4'
        computer_name = 'gil3'
        admin_password = 'ScJaw12deDFG'  # Auto generated?
        vm_name = resource_name  # will be created in real time?
        storage_name = 'gil4'

        # 2. Create a storage account
        self.vm_service.create_storage_account(group_name, region, storage_account_name)

        # 3. Create the network interface using a helper function (defined below)
        nic_id = self.vm_service.create_network(group_name, interface_name, ip_name, network_name, region, subnet_name)

        # 4. create Vm
        self.vm_service.create_vm(image_offer, image_publisher, image_sku, image_version, admin_password, admin_username,
                                  compute_client, computer_name, group_name, nic_id, region, storage_name, vm_name)
>>>>>>> 541af792f4048e832c50ce0638fd05fdcdb3d48b

        return DeployResult()
